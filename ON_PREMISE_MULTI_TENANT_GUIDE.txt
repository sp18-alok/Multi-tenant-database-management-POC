===============================================================================
                    ON-PREMISE MULTI-TENANT SYSTEM GUIDE
===============================================================================

OVERVIEW:
This system allows users to provide their own database connection details, and the 
application connects to their database, runs migrations, and manages tenant data 
directly in their database. Each user has complete data isolation.

===============================================================================
                            ARCHITECTURE
===============================================================================

1. TECHNOLOGY STACK:
   - Node.js with TypeScript
   - Express.js for API endpoints
   - TypeORM for database management (replaced Prisma for better multi-tenant support)
   - PostgreSQL for database
   - Dynamic database connections per tenant

2. KEY COMPONENTS:
   - src/entities/: TypeORM entities (Tenant.ts, User.ts)
   - src/config/data-source.ts: Dynamic database connection configuration
   - src/tenantManager.ts: Multi-tenant connection management
   - src/utils/database-verifier.ts: Database verification utilities
   - src/migrations/: TypeORM migrations for schema management

3. MULTI-TENANT PATTERN:
   - Database-per-tenant approach
   - Each user provides their own database connection
   - Complete data isolation between tenants
   - Dynamic migration execution per database

===============================================================================
                            SETUP STEPS
===============================================================================

STEP 1: INSTALL DEPENDENCIES
-----------------------------
npm install

STEP 2: CONFIGURE TYPESCRIPT
-----------------------------
tsconfig.json includes:
- experimentalDecorators: true
- emitDecoratorMetadata: true
- strictPropertyInitialization: false

STEP 3: CREATE DATABASE USERS AND DATABASES
-------------------------------------------
In pgAdmin4:

1. Create User 'test':
   - Right-click "Login/Group Roles" → Create → Login/Group Role
   - Name: test
   - Password: test123
   - Enable "Can login?"

2. Create User 'test2':
   - Right-click "Login/Group Roles" → Create → Login/Group Role
   - Name: test2
   - Password: test123
   - Enable "Can login?"

3. Create Database 'testDB':
   - Right-click "Databases" → Create → Database
   - Name: testDB
   - Owner: test

4. Create Database 'testDB2':
   - Right-click "Databases" → Create → Database
   - Name: testDB2
   - Owner: test2

5. Grant Permissions (Run in Query Tool):
   ```sql
   -- For testDB
   GRANT ALL PRIVILEGES ON DATABASE "testDB" TO "test";
   GRANT ALL PRIVILEGES ON SCHEMA public TO "test";
   GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "test";
   GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO "test";

   -- For testDB2
   GRANT ALL PRIVILEGES ON DATABASE "testDB2" TO "test2";
   GRANT ALL PRIVILEGES ON SCHEMA public TO "test2";
   GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO "test2";
   GRANT ALL PRIVILEGES ON ALL SEQUENCES IN SCHEMA public TO "test2";
   ```

STEP 4: START THE SERVER
------------------------
npm run dev
Server will run on http://localhost:3000

===============================================================================
                            HOW IT WORKS
===============================================================================

1. USER PROVIDES DATABASE CONNECTION:
   - User provides: username, password, database name, host, port
   - Application constructs PostgreSQL connection URL
   - Example: postgresql://test:test123@localhost:5432/testDB

2. DYNAMIC CONNECTION ESTABLISHMENT:
   - TypeORM creates data source dynamically for each request
   - Connection is established to user's database
   - No shared connections between tenants

3. MIGRATION EXECUTION:
   - TypeORM runs migrations automatically on first connection
   - Creates tables: tenants, users
   - Each database gets identical schema

4. DATA OPERATIONS:
   - All CRUD operations happen in user's database
   - Complete data isolation between tenants
   - No cross-tenant data access

5. CONNECTION MANAGEMENT:
   - TenantConnectionManager handles connection pooling
   - Connections are created on-demand
   - Proper cleanup on application shutdown

===============================================================================
                            API ENDPOINTS
===============================================================================

1. SETUP TENANT (Run Migrations + Add Tenant):
   POST /setup-tenant
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database",
     "tenantName": "Company Name"
   }

2. ADD USER:
   POST /add-user
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database",
     "email": "user@example.com",
     "name": "User Name"
   }

3. VERIFY DATABASE CONNECTION:
   POST /verify-connection
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database"
   }

4. VERIFY TABLES EXIST:
   POST /verify-tables
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database"
   }

5. VERIFY TENANT DATA:
   POST /verify-tenant
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database",
     "tenantName": "Company Name"
   }

6. VERIFY USER DATA:
   POST /verify-user
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database",
     "email": "user@example.com"
   }

7. GET ALL TENANTS:
   POST /get-all-tenants
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database"
   }

8. GET ALL USERS:
   POST /get-all-users
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database"
   }

9. FULL DATABASE VERIFICATION:
   POST /verify-database
   {
     "provider": "postgresql",
     "url": "postgresql://username:password@host:port/database",
     "tenantName": "Company Name",
     "userEmail": "user@example.com"
   }

===============================================================================
                            TESTING PROCEDURES
===============================================================================

METHOD 1: AUTOMATED TESTING (RECOMMENDED)
------------------------------------------

1. Run the multi-user test script:
   chmod +x test-multi-users.sh
   ./test-multi-users.sh

   This will test:
   - User 1: test/test123/testDB → Acme Corporation
   - User 2: test2/test123/testDB2 → TechStart Inc
   - Database connections
   - Migration execution
   - Data insertion
   - Data verification
   - Data isolation

METHOD 2: MANUAL TESTING
------------------------

1. Test Database Connection:
   curl -X POST http://localhost:3000/verify-connection \
     -H "Content-Type: application/json" \
     -d '{
       "provider": "postgresql",
       "url": "postgresql://test:test123@localhost:5432/testDB"
     }'

2. Setup Tenant:
   curl -X POST http://localhost:3000/setup-tenant \
     -H "Content-Type: application/json" \
     -d '{
       "provider": "postgresql",
       "url": "postgresql://test:test123@localhost:5432/testDB",
       "tenantName": "Acme Corporation"
     }'

3. Add User:
   curl -X POST http://localhost:3000/add-user \
     -H "Content-Type: application/json" \
     -d '{
       "provider": "postgresql",
       "url": "postgresql://test:test123@localhost:5432/testDB",
       "email": "john.doe@acme.com",
       "name": "John Doe"
     }'

4. Verify Data:
   curl -X POST http://localhost:3000/verify-database \
     -H "Content-Type: application/json" \
     -d '{
       "provider": "postgresql",
       "url": "postgresql://test:test123@localhost:5432/testDB",
       "tenantName": "Acme Corporation",
       "userEmail": "john.doe@acme.com"
     }'

METHOD 3: DATABASE DIRECT VERIFICATION
-------------------------------------

1. Verify testDB:
   psql postgresql://test:test123@localhost:5432/testDB -c "\dt"
   psql postgresql://test:test123@localhost:5432/testDB -c "SELECT * FROM tenants;"
   psql postgresql://test:test123@localhost:5432/testDB -c "SELECT * FROM users;"

2. Verify testDB2:
   psql postgresql://test2:test123@localhost:5432/testDB2 -c "\dt"
   psql postgresql://test2:test123@localhost:5432/testDB2 -c "SELECT * FROM tenants;"
   psql postgresql://test2:test123@localhost:5432/testDB2 -c "SELECT * FROM users;"

3. Run verification script:
   chmod +x verify-databases.sh
   ./verify-databases.sh

METHOD 4: PGADMIN4 GUI VERIFICATION
-----------------------------------

1. Open pgAdmin4
2. Navigate to each database:
   - testDB → Schemas → public → Tables
   - testDB2 → Schemas → public → Tables
3. Right-click on tables → View/Edit Data → All Rows

===============================================================================
                            EXPECTED RESULTS
===============================================================================

SUCCESSFUL TEST RESULTS:
-----------------------

1. Database Connections:
   - Both databases connect successfully
   - No connection errors

2. Migration Results:
   - Tables created: tenants, users
   - Identical schema in both databases

3. Data Insertion:
   - testDB: Acme Corporation tenant, John Doe user
   - testDB2: TechStart Inc tenant, Sarah Wilson user

4. Data Isolation:
   - testDB only contains Acme Corporation data
   - testDB2 only contains TechStart Inc data
   - No cross-database data leakage

5. Verification Results:
   - All verification tests pass
   - Data found in correct databases
   - Table structures identical

===============================================================================
                            TROUBLESHOOTING
===============================================================================

COMMON ISSUES:
--------------

1. Connection Failed:
   - Check database credentials
   - Verify database exists
   - Ensure user has proper permissions

2. Migration Failed:
   - Check user permissions on database
   - Verify database is not read-only
   - Check TypeORM configuration

3. Data Not Found:
   - Verify tenant name matches exactly
   - Check email address spelling
   - Ensure data was inserted successfully

4. Permission Denied:
   - Grant proper permissions to database user
   - Check PostgreSQL configuration
   - Verify user can create tables

DEBUGGING COMMANDS:
-------------------

1. Check PostgreSQL logs:
   tail -f /var/log/postgresql/postgresql-*.log

2. Test connection manually:
   psql postgresql://username:password@host:port/database

3. Check user permissions:
   psql -U postgres -c "\du"

4. Verify database exists:
   psql -U postgres -c "\l"

===============================================================================
                            ADVANTAGES OF THIS APPROACH
===============================================================================

1. COMPLETE DATA ISOLATION:
   - Each tenant has their own database
   - No risk of data leakage
   - Independent scaling possible

2. USER CONTROL:
   - Users provide their own database
   - Users control their data location
   - Users can backup their own data

3. FLEXIBILITY:
   - Support for different database versions
   - Custom database configurations
   - Independent maintenance schedules

4. SECURITY:
   - No shared database connections
   - Database-level security controls
   - User-managed access controls

5. COMPLIANCE:
   - Data residency compliance
   - Regulatory requirements met
   - Audit trail capabilities

===============================================================================
                            PRODUCTION CONSIDERATIONS
===============================================================================

1. CONNECTION POOLING:
   - Configure appropriate pool sizes
   - Monitor connection limits
   - Implement connection timeouts

2. MIGRATION STRATEGY:
   - Plan migration rollback procedures
   - Test migrations in staging
   - Version control for schema changes

3. MONITORING:
   - Database connection monitoring
   - Performance metrics
   - Error tracking and alerting

4. BACKUP STRATEGY:
   - User-managed backups
   - Application-level backup coordination
   - Disaster recovery procedures

5. SCALABILITY:
   - Horizontal scaling considerations
   - Load balancing strategies
   - Resource allocation planning

===============================================================================
                            CONCLUSION
===============================================================================

This on-premise multi-tenant system provides:
- Complete data isolation
- User control over their data
- Flexible deployment options
- TypeORM-based robust architecture
- Comprehensive testing capabilities
- Production-ready features

The system successfully demonstrates how to build a multi-tenant application
where users provide their own database connections and maintain complete
control over their data while the application handles migrations and
data management automatically.

=============================================================================== 